//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedicalManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MEDICALCOMPANYEntities : DbContext
    {
        public MEDICALCOMPANYEntities()
            : base("name=MEDICALCOMPANYEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<userLogin> userLogins { get; set; }
    
        public virtual int LoginDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginDelete", iDParameter);
        }
    
        public virtual int LoginInsert(string username, string userPass, string userType)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("userType", userType) :
                new ObjectParameter("userType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginInsert", usernameParameter, userPassParameter, userTypeParameter);
        }
    
        public virtual ObjectResult<LoginShowData_Result> LoginShowData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginShowData_Result>("LoginShowData");
        }
    
        public virtual int LoginUpdate(Nullable<int> iD, string username, string userPass, string userType)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("userType", userType) :
                new ObjectParameter("userType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginUpdate", iDParameter, usernameParameter, userPassParameter, userTypeParameter);
        }
    }
}
