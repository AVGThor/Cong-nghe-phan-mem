//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedicalManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MEDICALCOMPANYEntities : DbContext
    {
        public MEDICALCOMPANYEntities()
            : base("name=MEDICALCOMPANYEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accountant> Accountants { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<EXPORT> EXPORTs { get; set; }
        public virtual DbSet<IMPORT> IMPORTs { get; set; }
        public virtual DbSet<monthRevenue> monthRevenues { get; set; }
        public virtual DbSet<PRODUCT> PRODUCTs { get; set; }
        public virtual DbSet<Temp_EXPORT> Temp_EXPORT { get; set; }
        public virtual DbSet<Temp_IMPORT> Temp_IMPORT { get; set; }
        public virtual DbSet<userLogin> userLogins { get; set; }
    
        public virtual int addProduct(string proID, string proName, Nullable<decimal> price, Nullable<int> quantity)
        {
            var proIDParameter = proID != null ?
                new ObjectParameter("proID", proID) :
                new ObjectParameter("proID", typeof(string));
    
            var proNameParameter = proName != null ?
                new ObjectParameter("proName", proName) :
                new ObjectParameter("proName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProduct", proIDParameter, proNameParameter, priceParameter, quantityParameter);
        }
    
        public virtual int DELETE_EXPORT_ORDER(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_EXPORT_ORDER", idParameter);
        }
    
        public virtual int DELETE_IMPORT_ORDER(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_IMPORT_ORDER", idParameter);
        }
    
        public virtual int deleteProduct(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProduct", idParameter);
        }
    
        public virtual int delRevenueValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delRevenueValue");
        }
    
        public virtual int delTempExportValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delTempExportValue");
        }
    
        public virtual int delTempImportValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delTempImportValue");
        }
    
        public virtual int EXPORT_ORDER(string eID, string pro_id, string pro_name, string agent_id, Nullable<System.DateTime> eDATE, Nullable<int> qUANTITY, Nullable<decimal> pRICE, string deliver_status, string payment_status)
        {
            var eIDParameter = eID != null ?
                new ObjectParameter("EID", eID) :
                new ObjectParameter("EID", typeof(string));
    
            var pro_idParameter = pro_id != null ?
                new ObjectParameter("Pro_id", pro_id) :
                new ObjectParameter("Pro_id", typeof(string));
    
            var pro_nameParameter = pro_name != null ?
                new ObjectParameter("pro_name", pro_name) :
                new ObjectParameter("pro_name", typeof(string));
    
            var agent_idParameter = agent_id != null ?
                new ObjectParameter("agent_id", agent_id) :
                new ObjectParameter("agent_id", typeof(string));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(decimal));
    
            var deliver_statusParameter = deliver_status != null ?
                new ObjectParameter("deliver_status", deliver_status) :
                new ObjectParameter("deliver_status", typeof(string));
    
            var payment_statusParameter = payment_status != null ?
                new ObjectParameter("payment_status", payment_status) :
                new ObjectParameter("payment_status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EXPORT_ORDER", eIDParameter, pro_idParameter, pro_nameParameter, agent_idParameter, eDATEParameter, qUANTITYParameter, pRICEParameter, deliver_statusParameter, payment_statusParameter);
        }
    
        public virtual int IMPORT_ORDER(string iID, string pro_id, string pro_name, Nullable<System.DateTime> iDATE, Nullable<decimal> pRICE, Nullable<int> qUANTITY)
        {
            var iIDParameter = iID != null ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(string));
    
            var pro_idParameter = pro_id != null ?
                new ObjectParameter("Pro_id", pro_id) :
                new ObjectParameter("Pro_id", typeof(string));
    
            var pro_nameParameter = pro_name != null ?
                new ObjectParameter("pro_name", pro_name) :
                new ObjectParameter("pro_name", typeof(string));
    
            var iDATEParameter = iDATE.HasValue ?
                new ObjectParameter("IDATE", iDATE) :
                new ObjectParameter("IDATE", typeof(System.DateTime));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(decimal));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IMPORT_ORDER", iIDParameter, pro_idParameter, pro_nameParameter, iDATEParameter, pRICEParameter, qUANTITYParameter);
        }
    
        public virtual ObjectResult<showEXPORT_Result> showEXPORT(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showEXPORT_Result>("showEXPORT", monthParameter);
        }
    
        public virtual ObjectResult<showIMPORT_Result> showIMPORT(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showIMPORT_Result>("showIMPORT", monthParameter);
        }
    
        public virtual ObjectResult<showProduct_Result> showProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showProduct_Result>("showProduct");
        }
    
        public virtual ObjectResult<showREVENUE_Result> showREVENUE(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showREVENUE_Result>("showREVENUE", monthParameter);
        }
    
        public virtual ObjectResult<showTempEXPORT_Result> showTempEXPORT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showTempEXPORT_Result>("showTempEXPORT");
        }
    
        public virtual ObjectResult<showTempIMPORT_Result> showTempIMPORT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showTempIMPORT_Result>("showTempIMPORT");
        }
    
        public virtual int UPDATE_EXPORT_ORDER(string eID, string pro_id, string pro_name, string agent_id, Nullable<System.DateTime> eDATE, Nullable<int> qUANTITY, Nullable<decimal> pRICE, string deliver_status, string payment_status)
        {
            var eIDParameter = eID != null ?
                new ObjectParameter("EID", eID) :
                new ObjectParameter("EID", typeof(string));
    
            var pro_idParameter = pro_id != null ?
                new ObjectParameter("Pro_id", pro_id) :
                new ObjectParameter("Pro_id", typeof(string));
    
            var pro_nameParameter = pro_name != null ?
                new ObjectParameter("pro_name", pro_name) :
                new ObjectParameter("pro_name", typeof(string));
    
            var agent_idParameter = agent_id != null ?
                new ObjectParameter("agent_id", agent_id) :
                new ObjectParameter("agent_id", typeof(string));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(decimal));
    
            var deliver_statusParameter = deliver_status != null ?
                new ObjectParameter("deliver_status", deliver_status) :
                new ObjectParameter("deliver_status", typeof(string));
    
            var payment_statusParameter = payment_status != null ?
                new ObjectParameter("payment_status", payment_status) :
                new ObjectParameter("payment_status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_EXPORT_ORDER", eIDParameter, pro_idParameter, pro_nameParameter, agent_idParameter, eDATEParameter, qUANTITYParameter, pRICEParameter, deliver_statusParameter, payment_statusParameter);
        }
    
        public virtual int UPDATE_IMPORT_ORDER(string iID, string pro_id, string pro_name, Nullable<System.DateTime> iDATE, Nullable<decimal> pRICE, Nullable<int> qUANTITY)
        {
            var iIDParameter = iID != null ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(string));
    
            var pro_idParameter = pro_id != null ?
                new ObjectParameter("Pro_id", pro_id) :
                new ObjectParameter("Pro_id", typeof(string));
    
            var pro_nameParameter = pro_name != null ?
                new ObjectParameter("pro_name", pro_name) :
                new ObjectParameter("pro_name", typeof(string));
    
            var iDATEParameter = iDATE.HasValue ?
                new ObjectParameter("IDATE", iDATE) :
                new ObjectParameter("IDATE", typeof(System.DateTime));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(decimal));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_IMPORT_ORDER", iIDParameter, pro_idParameter, pro_nameParameter, iDATEParameter, pRICEParameter, qUANTITYParameter);
        }
    
        public virtual int updateProduct(string proId, string proName, Nullable<decimal> pRICE, Nullable<int> qUANTITY)
        {
            var proIdParameter = proId != null ?
                new ObjectParameter("proId", proId) :
                new ObjectParameter("proId", typeof(string));
    
            var proNameParameter = proName != null ?
                new ObjectParameter("proName", proName) :
                new ObjectParameter("proName", typeof(string));
    
            var pRICEParameter = pRICE.HasValue ?
                new ObjectParameter("PRICE", pRICE) :
                new ObjectParameter("PRICE", typeof(decimal));
    
            var qUANTITYParameter = qUANTITY.HasValue ?
                new ObjectParameter("QUANTITY", qUANTITY) :
                new ObjectParameter("QUANTITY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProduct", proIdParameter, proNameParameter, pRICEParameter, qUANTITYParameter);
        }
    
        public virtual ObjectResult<showAgent_Result> showAgent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showAgent_Result>("showAgent");
        }
    }
}
